version: '3'
services:
  
  zookeeper:
    image: confluentinc/cp-zookeeper:6.1.1
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2182
    networks:
      - warehouse_network

  # reachable on 9092 from the host and on 29092 from inside docker compose
  kafka:
    container_name: "kafka"
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - zookeeper
    ports:
      - '9093:9092'
    expose:
      - '29092'
    environment:
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2182'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://172.176.113.155:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: '1'
      KAFKA_MIN_INSYNC_REPLICAS: '1'
    networks:
      - warehouse_network

  init-kafka:
    image: confluentinc/cp-kafka:6.1.1
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - warehouse_network
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic sendProdUpdtNew --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic soldProduct --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
  
  app:
    container_name: "warehouse_app"
    build: "."
    image: "warehouse_app"
    # image: "ghcr.io/duarte-figueiredo/warehouse:latest"
    ports:
      - "8080:8080"
    depends_on:
      - db
      - kafka
      - init-kafka
    networks:
      - warehouse_network
    environment:
      KAFKA_URL: '172.176.113.155:9092'
      KAFKA_TOPIC_PRODUCTS: 'products'
      KAFKA_TOPIC_PURCHASEDPRODUCTS: 'purchasedproducts' 

  db:
    image: postgres
    container_name: postgres_container
    environment:
      POSTGRES_HOST: localhost
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      POSTGRES_DB: postgres
    volumes:
      - ./scripts:/docker-entrypoint-initdb.d/
    networks:
      - warehouse_network

  # pgadmin:
  #   container_name: pgadmin4_container
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: root
  #   networks:
  #     - warehouse_network
  #   ports:
  #     - "5050:80"

# lightweigh alternative to pgadmin  
  # adminer:
  #   image: adminer
  #   restart: always
  #   networks:
  #     - warehouse_network
  #   ports:
  #     - 8081:8080
    

networks:
  warehouse_network:
